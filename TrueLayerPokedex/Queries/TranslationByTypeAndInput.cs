using System;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Magneto;
using Microsoft.Extensions.Caching.Memory;
using TrueLayerPokedex.HttpClients;

namespace TrueLayerPokedex.Queries
{
	/// <summary>
	/// This class implements the command pattern, as required by the use of Magneto library (developed by myself).
	/// Magneto will manage reading and writing from a memory cache, and all we have to do is:
	/// 1. specify how the cache key should vary
	/// 2. specify how and when the cache should become expired
	/// 3. implement a method for getting the raw response and mapping into the desired result
	/// </summary>
	class TranslationByTypeAndInput : AsyncCachedQuery<FunTranslationsApiClient, MemoryCacheEntryOptions, string>
	{
		public TranslationByTypeAndInput(string type, string input)
		{
			Type = type;
			Input = input;
		}

		protected override void CacheKey(ICache cache) => cache.VaryBy($"{Type}|{Input}");

		protected override MemoryCacheEntryOptions CacheEntryOptions(FunTranslationsApiClient context) =>
			new MemoryCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromSeconds(30));

		protected override async Task<string> Query(FunTranslationsApiClient context, CancellationToken cancellationToken)
		{
			using var request = new HttpRequestMessage(HttpMethod.Post, $"{Type.ToLowerInvariant()}.json")
			{
				Content = JsonContent.Create(new
				{
					text = Input
				})
			};
			var response = await context.HttpClient.SendAsync(request, cancellationToken);

			if (response.IsSuccessStatusCode)
			{
				var translationResponse = await response.Content.ReadFromJsonAsync<TranslationResponse>(new(JsonSerializerDefaults.Web), cancellationToken);

				if (translationResponse?.success?.total >= 1 && translationResponse.contents?.translated != null)
					return translationResponse.contents.translated;

				return null;
			}

			throw new HttpRequestException(@$"{request.Method} request to {request.RequestUri} failed with status code {response.StatusCode}.");
		}

		public string Type { get; }
		public string Input { get; }
	}

	// NOTE: The classes below were just auto-generated by Visual Studio using "Edit -> Paste Special"
#pragma warning disable IDE1006 // Naming Styles
	// ReSharper disable InconsistentNaming
	// ReSharper disable ClassNeverInstantiated.Global
	public class TranslationResponse
	{
		public Success success { get; set; }
		public Contents contents { get; set; }
	}

	public class Success
	{
		public int total { get; set; }
	}

	public class Contents
	{
		public string translated { get; set; }
		public string text { get; set; }
		public string translation { get; set; }
	}
}
